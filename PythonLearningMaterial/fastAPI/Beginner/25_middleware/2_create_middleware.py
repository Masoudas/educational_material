"""
Me: The middleware gets the end point functions as one argument, and then returns the response. It has to be uniformly applied to all endpoints, and that's why the second argument is just always a function!

To create a middleware you use the decorator @app.middleware("http") on top of a function. The middleware function receives:
    -   The request.
    -   A function call_next that will receive the request as a parameter.
    -   This function will pass the request to the corresponding path operation.
    -   Then it returns the response generated by the corresponding path operation.

You can then modify further the response before returning it.

Me: Note that we wait asynchrounously for the request. Note also that we added a parameter 'X-Process-Time' to the response, indicating how much processing the request took. 

Me: What is the request? It's the request parameters.
"""
import fastapi
import time

app = fastapi.FastAPI()


@app.middleware("http")
async def add_process_time_header(request: fastapi.Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response
