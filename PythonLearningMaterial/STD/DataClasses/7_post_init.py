"""
Me: Note that in POD, essentially a constructor should be empty. As such, we normally musn't have PoDs whose
values depend on each other for example. However, it's Python territory, and we have the __post_init__ function.

The generated __init__() code will call a method named __post_init__(), if __post_init__() is defined on the class. 
It will normally be called as self.__post_init__(). However, if any InitVar fields are defined, they will also be 
passed to __post_init__() in the order they were defined in the class. If no __init__() method is generated, then 
__post_init__() will not automatically be called.

Among other uses, this allows for initializing field values that depend on one or more other fields. For example:

@dataclass
class C:
    a: float
    b: float
    c: float = field(init=False)

    def __post_init__(self):
        self.c = self.a + self.b

The __init__() method generated by dataclass() does not call base class __init__() methods. If the base class has 
an __init__() method that has to be called, it is common to call this method in a __post_init__() method:

@dataclass
class Rectangle:
    height: float
    width: float

@dataclass
class Square(Rectangle):
    side: float

    def __post_init__(self):
        super().__init__(self.side, self.side)

Note, however, that in general the dataclass-generated __init__() methods donâ€™t need to be called, since the 
derived dataclass will take care of initializing all fields of any base class that is a dataclass itself.
"""