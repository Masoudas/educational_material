It's good to understand the structure of the SoC (microcontroller) before we understand how the booting operation 
takes place.

The SoC of BeagleBone black is a AM335x 1GHz Cortex-A8, and I know this from its website, or just a simple 
inspection. Now, we can find the chip data sheet on the website, and there's an image right there showing the
content of the SoC. We have inside:
    -   L1 and L2 caches.
    -   176KB of ROM
    -   64KB of RAM (This is different from the RAM provided on the device, which is 512MByte!), and 64KB
        shared RAM. At least the first one I know is an SRAM. The shared one probably is as well.
    -   UART, I2C, SPI, etc
    -   WDT (Watch Dog Timer) and other things
    -   MMC or SD support, etc.
    -   Memory interfaces for DDR2, DDR3, etc.

As the book states "In the old days, there used to an external memory that contained the boot sequence, but this
is not practical today. In the absence of reliable external memory, the code that runs immediately after a reset or 
power-on has to be stored on-chip in the SoC; this is known as ROM code. It is loaded into the chip when it is 
manufactured, and hence the ROM code is proprietary and cannot be replaced by an open source equivalent. Usually, 
it does not include code to initialize the memory controller, since DRAM configurations are highly device-specific, 
and so it can only use Static Random Access Memory (SRAM), which does not require a memory controller."

Me: In other words, the code in ROM cannot be big enough to initialize the (external) RAM. Hence, we need to use
another smaller program to load RAM. This is done thanks to Uboot SPL (Secondary Program Loader,) which is loaded
inside the 64KB RAM of the SoC.