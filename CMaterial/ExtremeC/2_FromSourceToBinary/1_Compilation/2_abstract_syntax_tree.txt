Consider the following code:

int main() {
  int var1 = 1; double var2 = 2.5;
  int var3 = var1 + var2; return 0;
}

To generate the abstract syntax tree with clang, one does:

$ clang -Xclang -ast-dump -fsyntax-only prog.c

Below is an example of an output. The portion with 'FunctionDecl' represents the function part.

TranslationUnitDecl 0x212d4f8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x212dd90 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x212da90 '__int128'
|-TypedefDecl 0x212de00 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x212dab0 'unsigned __int128'
|-TypedefDecl 0x212e108 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x212dee0 'struct __NSConstantString_tag'
|   `-Record 0x212de58 '__NSConstantString_tag'
|-TypedefDecl 0x212e1a0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x212e160 'char *'
|   `-BuiltinType 0x212d590 'char'
|-TypedefDecl 0x212e498 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x212e440 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x212e280 'struct __va_list_tag'
|     `-Record 0x212e1f8 '__va_list_tag'
`-FunctionDecl 0x218d180 <prog.c:1:1, line:6:1> line:1:5 main 'int ()'
  `-CompoundStmt 0x218d560 <col:12, line:6:1>
    |-DeclStmt 0x218d308 <line:2:3, col:15>
    | `-VarDecl 0x218d280 <col:3, col:14> col:7 used var1 'int' cinit
    |   `-IntegerLiteral 0x218d2e8 <col:14> 'int' 1
    |-DeclStmt 0x218d3c0 <line:3:3, col:20>
    | `-VarDecl 0x218d338 <col:3, col:17> col:10 used var2 'double' cinit
    |   `-FloatingLiteral 0x218d3a0 <col:17> 'double' 2.500000e+00
    |-DeclStmt 0x218d518 <line:4:3, col:25>
    | `-VarDecl 0x218d3f0 <col:3, col:21> col:7 var3 'int' cinit
    |   `-ImplicitCastExpr 0x218d500 <col:14, col:21> 'int' <FloatingToIntegral>
    |     `-BinaryOperator 0x218d4e0 <col:14, col:21> 'double' '+'
    |       |-ImplicitCastExpr 0x218d4c8 <col:14> 'double' <IntegralToFloating>
    |       | `-ImplicitCastExpr 0x218d498 <col:14> 'int' <LValueToRValue>
    |       |   `-DeclRefExpr 0x218d458 <col:14> 'int' lvalue Var 0x218d280 'var1' 'int'
    |       `-ImplicitCastExpr 0x218d4b0 <col:21> 'double' <LValueToRValue>
    |         `-DeclRefExpr 0x218d478 <col:21> 'double' lvalue Var 0x218d338 'var2' 'double'
    `-ReturnStmt 0x218d550 <line:5:3, col:10>
      `-IntegerLiteral 0x218d530 <col:10> 'int' 0