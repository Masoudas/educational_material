/*
A slice has both a length and a capacity. The length of a slice is the number of elements it contains.

The capacity of a slice is the number of elements in the underlying array, counting from the first element in the slice. (ME: The capacity tells us how much we can extend the current slice. So, for example, if I have a slice of an slice, the second is slice is going to extend as much as the first slice. Hence, capacity is not actually the length of the original array. Apparently, zero slice is an exception, and keeps the capacity of the original array.)

The length and capacity of a slice s can be obtained using the expressions len(s) and cap(s).

You can extend a slice's length by re-slicing it, provided it has sufficient capacity. Try changing one of the slice operations in the example program to extend it beyond its capacity and see what happens.
*/
package main

import "fmt"

func main() {
	s := []int{2, 3, 5, 7, 11, 13}
	printSlice(s)

	// Slice the slice to give it zero length. Capacity is still 6.
	s = s[:0]
	printSlice(s)

	// Extend its length. Capacity is still 6.
	s = s[:4]
	printSlice(s)

	// Drop its first two values. Capacity is now 4.
	s = s[2:]
	printSlice(s)

	// Drop its first two values. Capacity is now 3.
	s = s[1:]
	printSlice(s)

}

func printSlice(s []int) {
	fmt.Printf("len=%d cap=%d %v\n", len(s), cap(s), s)
}
