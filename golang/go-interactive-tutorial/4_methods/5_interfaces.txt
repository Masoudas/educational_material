/*
An interface type is defined as a set of method signatures. A value of interface type can hold any value that implements those methods.

ME: There's no implement keyword. A type that complies to the interface supposedly implements the interface (Walks like a duck, and that gibber gabber)

*/

type Abser interface{
    Abs() float64
}

type MyFloat float64

func (f MyFloat) Abs() float64 {
	if f < 0 {
		return float64(-f)
	}
	return float64(f)
}

type Vertex struct {
	X, Y float64
}

func (v *Vertex) Abs() float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}


func main() {
	var a Abser
	f := MyFloat(-math.Sqrt2)
	v := Vertex{3, 4}

	a = f  // a MyFloat implements Abser
	a = &v // a *Vertex implements Abser ME: Ok! A pointer can be assigned to a type!

	// In the following line, v is a Vertex (not *Vertex)
	// and does NOT implement Abser.
	a = v

	fmt.Println(a.Abs())
}