To create a new trigger in PostgreSQL, you follow these steps:

    -   First, create a trigger function using CREATE FUNCTION statement.
    -   Second, bind the trigger function to a table by using CREATE TRIGGER statement.

The following illustrates the syntax of a trigger function. Notice that you can create a trigger function using any languages supported by PostgreSQL. In this tutorial, we will use PL/pgSQL:

$ CREATE FUNCTION trigger_function() 
   RETURNS TRIGGER 
   LANGUAGE PLPGSQL
AS $$
BEGIN
   -- trigger logic
END;
$$

A trigger function receives data about its calling environment through a special structure called TriggerData which contains a set of local variables. For example, OLD and NEW represent the states of the row in the table before or after the triggering event.

PostgreSQL also provides other local variables preceded by TG_ such as TG_WHEN, and TG_TABLE_NAME. 
Once you define a trigger function, you can bind it to one or more trigger events such as INSERT, UPDATE, and DELETE.

--------------------
Once the trigger function is created, we may employ it in a trigger statement. The CREATE TRIGGER statement creates a new trigger. The following illustrates the basic syntax of the CREATE TRIGGER statement:

$ CREATE TRIGGER trigger_name 
   {BEFORE | AFTER} { event }
   ON table_name
   [FOR [EACH] { ROW | STATEMENT }]
       EXECUTE PROCEDURE trigger_function

    -  First, specify the name of the trigger after the TRIGGER keywords.
    -   Second, specify the timing that cause the trigger to fire. It can be BEFORE or AFTER an event occurs.
    -   Third, specify the event that invokes the trigger. The event can be INSERT , DELETE, UPDATE or TRUNCATE.
    -   Fourth, specify the name of the table associated with the trigger after the ON keyword.
    -   Fifth, specify the type of triggers which can be:
        --  Row-level trigger that is specified by the FOR EACH ROW clause.
        --  Statement-level trigger that is specified by the FOR EACH STATEMENT clause.
        A row-level trigger is fired for each row while a statement-level trigger is fired for each transaction. Suppose a table has 100 rows and two triggers that will be fired when a DELETE event occurs. If the DELETE statement deletes 100 rows, the row-level trigger will fire 100 times, once for each deleted row. On the other hand, a statement-level trigger will be fired for one time regardless of how many rows are deleted. Finally, specify the name of the trigger function after the EXECUTE PROCEDURE keywords.

