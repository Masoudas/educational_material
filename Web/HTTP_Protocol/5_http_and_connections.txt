A connection is controlled at the transport layer, and therefore fundamentally out of scope for HTTP. HTTP doesn't 
require the underlying transport protocol to be connection-based; it only requires it to be reliable, or not lose 
messages (at minimum, presenting an error in such cases). Among the two most common transport protocols on the 
Internet, TCP is reliable and UDP isn't. HTTP therefore relies on the TCP standard, which is connection-based.

Before a client and server can exchange an HTTP request/response pair, they must establish a TCP connection, a 
process which requires several round-trips. The default behavior of HTTP/1.0 is to open a separate TCP connection 
for each HTTP request/response pair. This is less efficient than sharing a single TCP connection when multiple 
requests are sent in close succession.

In order to mitigate this flaw, HTTP/1.1 introduced pipelining (which proved difficult to implement) and 
persistent connections: the underlying TCP connection can be partially controlled using the Connection header. 
HTTP/2 went a step further by multiplexing messages over a single connection, helping keep the connection warm 
and more efficient.

Experiments are in progress to design a better transport protocol more suited to HTTP. For example, Google is 
experimenting with QUIC which builds on UDP to provide a more reliable and efficient transport protocol.