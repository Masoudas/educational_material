/**
* Note that the thread class can be destructed before the thread finishes its job (especially if it's an
* auto variable,) or it can be destroyed after the thread is finished (like if the object is destroyed 
* after we put the thread to sleep.) (Me: The point however is that so long as the program process is
* alive, the context of all the threads generated by the program can be reloaded by the OS, thus allowing
* the application to continue.)
* 
* Note that a thread has to either be joined or detached, otherwise when that thread terminates, the
* infamous std::terminate is called, and the program throws an error!
*/