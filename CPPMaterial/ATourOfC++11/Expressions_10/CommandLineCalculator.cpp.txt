/**
Here, we implement a command line calculator, which reads tokens from the command line and does
operations on them*/

class Token_stream {
public:
	Token_stream(istream& s) : ip{&s}, owns{false} { }
	Token_stream(istream* p) : ip{p}, owns{true} { }
	~Token_stream() { close(); }
	
	Token get(); // read and return next token
	Token& current(); // most recently read token
	void set_input(istream& s) { close(); ip = &s; owns = false; }
	void set_input(istream* p) { close(); ip = p; owns = true; }

private:
	void close() { if (owns) delete ip; }
	istream* ip; //pointer to an input stream
	bool owns; // does the Token_stream own the istream?
	Token ct {Kind::end} ; // current token
};


enum class Kind : char {
	name, number, end,
	plus='+', minus='-', mul='*', div='/’, print=';', assign='=', lp='(', rp=')'
};

struct Token {
	Kind kind;
	string string_value;
	double number_value;
};


double expr(bool get) // add and subtract
{
double left = term(get);
for (;;) { // ‘‘forever’’
	switch (ts.current().kind) {
		case Kind::plus:
			left += term(true);
			break;
		case Kind::minus:
			left -= term(true);
			break;
		default:
			return left;
		}
	}
}

double term(bool get) // multiply and divide
{
double left = prim(get);
for (;;) {
	switch (ts.current().kind) {
		case Kind::mul:
			left *= prim(true);
			break;
		case Kind::div:
			if (auto d = prim(true)) {
			left /= d;
			break;
		}
		
		return error("divide by 0");
		default:
		return left;
}
}

double prim(bool get) // handle primaries
{
	if (get) ts.get(); // read next token
	switch (ts.current().kind) {
		case Kind::number: // floating-point constant
		{ double v = ts.current().number_value;
		ts.get();
		return v;
		}
		
		case Kind::name:
			{ double& v = table[ts.current().string_value]; // find the corresponding (We have a table of expression like PI = 3.14 defined by the user)
			  if (ts.get().kind == Kind::assign) v = expr(true); // ’=’ seen: assignment
			return v;
		}

		case Kind::minus: // unar y minus
			return -prim(true);
		
		case Kind::lp:
			{ auto e = expr(true);
			if (ts.current().kind != Kind::rp) return error("')' expected");
			ts.get(); // eat ’)’
			return e;
			}
			
			default:
				return error("primar y expected");
}
}
}