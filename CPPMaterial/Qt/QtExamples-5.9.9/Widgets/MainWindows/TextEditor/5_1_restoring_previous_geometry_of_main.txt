So first of all, note that every window (or more precisely every widget) has to methods:
    -   resize: For resizing the window
    -   move:   Move the window to a particular location. 

Hence, we can use these methods on the frame to define the size of our editor. Moreover, we can set these 
based on the available size of the monitor by querying them from the QApplication method. This is done simply
by calling the 'QApplication::desktop()::availableGeometry(this)', which is as we can see a static method.

Last, we can add this additional step that we read these information from what the user has saved the last
time. This is saved by the Qt application itself and has nothing to do with us, using the QSetting class.

We create an instance of this class for our current application as follows:
QSetting setting{QCoreApplication::organizationName(), QCoreApplication::applicationName()};

That way, the setting is read for this application. Now, from the setting, we can get the geometry value,
which was saved the last time as a byte array (the string geometry is optional, see next:)

const QByteArray geometry = settings.value("geometry", QByteArray()).toByteArray();

Now, we can check whether this bytearray is empty, and if so, we can set the size based on our method discussed
above. The full method is as follows. Note that the method maybe called in the constructor:


void MainWindow::readSettings()
{
    QSettings settings(QCoreApplication::organizationName(), QCoreApplication::applicationName());
    const QByteArray geometry = settings.value("geometry", QByteArray()).toByteArray();
    if (geometry.isEmpty()) {
        const QRect availableGeometry = QApplication::desktop()->availableGeometry(this);
        resize(availableGeometry.width() / 3, availableGeometry.height() / 2);
        move((availableGeometry.width() - width()) / 2,
             (availableGeometry.height() - height()) / 2);
    } else {
        restoreGeometry(geometry);
    }
}