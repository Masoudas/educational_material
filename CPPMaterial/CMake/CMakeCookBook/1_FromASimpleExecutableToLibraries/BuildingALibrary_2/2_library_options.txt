The following library types can be built with CMake:

    -   STATIC, which we have already encountered, will be used to create static libraries, that is, 
        archives of object files for use when linking other targets, such as executables.
    
    -   SHARED will be used to create shared libraries, that is, libraries that can be linked dynamically 
        and loaded at runtime. Switching from a static library to a dynamic shared object (DSO) is as easy 
        as using add_library(message SHARED Message.hpp Message.cpp) in CMakeLists.txt. 
    
    -   OBJECT can be used to compile the sources in the list given to add_library to object files, but then 
        neither archiving them into a static library nor linking them into a shared object. The use of object 
        libraries is particularly useful if one needs to create both static and shared libraries in one go. We 
        will demonstrate this in this recipe.
        Note: This command does not generate any output in the build folder. What it does is that it only
        allows us to have a generator expression "$<TARGET_OBJECTS:target_name>", which means that we can
        use the objects of this target to reuse it STATIC or SHARED, as we'll show next. 
    
    -   MODULE libraries are once again DSOs. In contrast to SHARED libraries, they are not linked to any 
        other target within the project, but may be loaded dynamically later on. This is the argument to use 
        when building a runtime plugin.
    
Note that OBJECT does not generate any output, which is quite interesting.

CMake is also able to generate other special forms of libraries that generate no output:
    -   IMPORTED: This type of library target represents a library located outside the project. The main use 
        for this type of library is to model pre-existing dependencies of the project that are provided by 
        upstream packages. As such IMPORTED libraries are to be treated as immutable

    -   INTERFACE: This special type of CMake library is similar to an IMPORTED library, but is mutable and 
        has no location. Its main use case is to model usage requirements for a target that is outside our 
        project.

    -   ALIAS, as the name suggests, a library of this type defines an alias for a pre-existing library target 
        within the project. It is thus not possible to choose an alias for an IMPORTED library.
        Synatx is:
        add_library(<name> ALIAS <target>)

Hence for example, to create an alias for the MSG_LIB_SHARED called MSG_LIB:
add_library(MSG_LIB ALIAS MG_LIB_SHARED)
