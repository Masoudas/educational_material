Consider testing the following simple summation code. In the next file, we shall describe how to write the test:

%%%%%% sum_integers.cpp
# include "sum_integers.hpp"

int sum_integers(const std::vector<int> v){
    auto sum = 0;
    for (auto val : v){
        sum += val;
    }
    return sum;
}

%%%%% sum_integers.hpp
#include <vector>

int sum_integers(const std::vector<int>);

%%%%% main.cpp
#include "sum_integers.hpp"
  
#include <iostream>
#include <string>
#include <vector>

// we assume all arguments are integers and we sum them up
// for simplicity we do not verify the type of arguments
int main(int argc, char *argv[]) {

  std::vector<int> integers;
  for (auto i = 1; i < argc; i++) {
    integers.push_back(std::stoi(argv[i]));
  }
  auto sum = sum_integers(integers);

  std::cout << sum << std::endl;
}

%%%%% Test.cpp
#include "sum_integers.hpp"
  
#include <vector>

int main() {
  auto integers = {1, 2, 3, 4, 5};

  if (sum_integers(integers) == 15) {
    return 0;
  } else {
    return 1;
  }
}

Here's a shell script for testing our program.
%%%%% test.sh 
#!/usr/bin/env bash
  
EXECUTABLE=$1

OUTPUT=$($EXECUTABLE 1 2 3 4)

if [ "$OUTPUT" = "10" ]
then
    exit 0
else
    exit 1
fi

And here's a Python that also checks this code:
%%%%% test.py 
import subprocess
import argparse

# test script expects the executable as argument
parser = argparse.ArgumentParser()
parser.add_argument('--executable', help='full path to executable')
parser.add_argument('--short', 
                    default=False,
                    action='store_true',
                    help='run a shorter test')
args = parser.parse_args()


def execute_cpp_code(integers):
    result = subprocess.check_output([args.executable] + integers)
    return int(result)


if args.short:
    # we collect [1, 2, ..., 100] as a list of strings
    result = execute_cpp_code([str(i) for i in range(1, 101)])
    assert result == 5050, 'summing up to 100 failed'
else:
    # we collect [1, 2, ..., 1000] as a list of strings
    result = execute_cpp_code([str(i) for i in range(1, 1001)])
    assert result == 500500, 'summing up to 1000 failed'

