A question that always baffled me is how are we supposed to get the id of the current process? The answer is, through
the $$ variable.

$ echo $$

As such, we can take a look at the process tree of the current process using pstree:
$ pstree -ps $$	# s for showing parents. p for showing pids. Some people add A for showing only ascii chars as 
				# well, and not showing weird chars like long dashes.
systemd(1)---systemd(1559)---gnome-shell(1841)---code(4630)---code(4764)---code(4798)---bash(4987)---pstree(5439)				
Notice that we pass the id of the current shell, but it goes to show the children of that process, or children
of children of that process.

Notice that a process (like a shell) can have several subprocesses. For example,
$ sleep 1200 &; sleep 1500 &; pstree -A -p -s $$
systemd(1)---systemd(1559)---gnome-shell(1841)---code(4630)---code(4764)---code(4798)---bash(4987)-+-pstree(5966)
                                                                                                   |-sleep(5961)
                                                                                                   `-sleep(5965)

Note that there's a concept that says processes are spawned from a parent concept. That is, no process can exist
independently of a parent process.