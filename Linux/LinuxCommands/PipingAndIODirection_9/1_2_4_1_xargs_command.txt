We can convert the result of stdout to command line arguments using xargs. The man page of xargs says:

Name:
    xargs - build and execute command lines from standard input

Me: Notice the difference between xargs and eval. eval executes a command from string, this one standard
output.

The simples example of xargs is the following:
$ echo "/" | xargs ls

So, this command is evaluated as 'ls /', because / is given to stdout, then stdout instead of shell is 
piped to xargs, which reads it. Hence, this command is evaluated as:

$ ls /  # Notice that the output result does not have the usuall coloring we seek.

without the xargs, something like 'echo '/' | ls -' does not work, because ls is not written in such a way
that it reads from stdout.

We can for example pipe it to remove all files of a particular format (notice that print0 sets a 0
delimiter to the end of each line, and -0 means use that as delimiter:) 
$ find . -name '*.extension' -print0 | xargs -0 rm -v

Me: I checked, and the version with no delimiter also works. Possibly, it's slower

This obscure but rather interesting use is also mentioned in tldr:
Execute the command once for each input line, replacing any occurrences of the placeholder (here marked as _) 
with the input line:
{{arguments_source}} | xargs -I _ {{command}} _ {{optional_extra_arguments}}