We can add the following to the .bashrc file to define a prepend function:

prepend() { [ -d "$2" ] && eval $1=\"$2':'\$$1\" && export $1; }

That way, we can type:

prepend PATH /opt/myapp/bin 
prepend LD_LIBRARY_PATH /opt/myapp/lib

What is this beast?
First of all, note that this is exactly like the definition of a function in C. Then

    -   [ -d "$2" ]
    Ensures that the dir specified by variable 2 actually does exit. The result is a boolean.

    -   eval $1=\"$2':'\$$1\"
    Evaluates this expression and puts the result in $1. The goal here is to create a string, which is then
    evaluated by eval.
    Notice that we assign to the value of $1 (name of the  variable.) Also, notice that we have to scape :, which 
    we did with quotes (me: I check, and we can do it with \ as well!) Third, notice that we say \$$1. The first 
    one is to form the expression that's going to be evaluated by eval (eval is like executing a command on the 
    actual bash from a string.) Hence, we need to use it to append to the variable.
    Finally, notice the outer quation marks are scaped. We need them scaped, so that upon evaluation, if a 
    parameter has semicolon, space or something else, it does not result in truncation of the string.

    - export $1
    After finising the evaluation and setting $1 to its new value, then we export it.

Question: Why are we anding these commands? From what I've seen over a couple of examples, anding commands is
a nice way of chaining a couple of commands, some of which may return a boolean as well to allow for termination
of the rest of the command, like:

$ ls . && ls ..



